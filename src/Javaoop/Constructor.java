package Javaoop;
////with the constructor we can  initiolized value to the object
// Constructor looks like method but it is not. It does not have a return type and its name is same as the class name.
// a class have multiple constructor where all names are same as class name but the parameter are different
// the constructor name must match the class name, and it cannot have a return type (like void).
//When we have more than one constructor with different parameter to
//initialize different fields, it is called constructor overloading (One kind of
//Polymorphism)
//You cannot define an explicit value to a constructor.
// we did not call any method
//it is special type of method that is used to initialize the object(jake call dite hoi na, autometic call hobe)
//no  void word can be use or no return type
//A constructor cannot be any of these: static, synchronized, abstract, or final.
// when ever we create object of the class automatic its going to run
// it may or may not have parameter/arguments

//constructor er maddome object value guli k initiolized korvo(IMP)
//with the constructor we can  initiolized value to the object
//কনস্ট্রাক্টর দিয়ে আমরা অবজেক্টের মান শুরু করতে পারি
//its call autumatically
// 1.Constructors can be overloaded:

//2. Default constructor:

//The default constructor is only generated by the compiler:

//3 Constructors are not inherited
//Which keyword is not allowed in constructor?
   //     The static , final and abstract keywords are not meaningful for //a constructor because: static members belong to a class, but the constructor is needed to create an object.

//Unlike methods in a superclass can be inherited by subclasses, constructors are not inherited.
// Consider the following

//4 Constructors can be private!
// class SpecialDog{
// private SpecialDog() {
//    }
//}
public class Constructor {
   public Constructor() {

       System.out.println("I have no parameter or default constructor is being invoked ");
    }
   public Constructor(int a) {
        System.out.println("I have one perameter");

    }
   public Constructor (int a,int b){
        System.out.println("I have 2 int parameter");

    }
    public Constructor(String n,String g,int p) {

       System.out.println("I have 2 String parameter and 1 int parameter");
    }
   public Constructor(double d,int b) {

       System.out.println("I have  double and int parameter");
    }
    public static void main(String[] args) {
        Constructor cc = new Constructor();



//        Constructor ccc=new Constructor(20,30);
//
//        Constructor cccc=new Constructor(10.03,5);
//
//          Constructor ccccc=new  Constructor(50);
//
//        Constructor ac=new  Constructor("Mosammat","Begum",71884777);


    }
}


  //  Constructor looks like method but it is not. It does not have a return type and its name is same as the class name.
//  But, a constructor cannot be overridden


//4. The default constructor is only generated by the compiler:

//5. Constructors are not inherited:

//class Rectangle {
//    Rectangle(int width, int height) { }
//}


//class Square extends Rectangle {
//}
//We can’t do something like this:
//1
//Square box = new Square(10, 10);



//7Constructors can be private!
//Yes, this is true. We can make a constructor private to prevent the outside world from creating a new instance of our class. Consider the following class with a private constructor:

//class SpecialDog {
//    private SpecialDog() {
//    }
//}

//A constructor calls the default constructor of its superclass:
//class Parent {
//    Parent(int number) {
//  }  }
//class Child extends Parent {
//    Child() {
//   } }
//Here, the code doesn’t get compiled because the compiler inserts a call to super() in the Child’s constructor:
//Child() {
//    super();    // auto-inserted by the compiler
//}

//How do you identify a constructor?
//Java Constructor - Javatpoint
//There are two rules defined for the constructor.
//Constructor name must be the same as its class name.
//A Constructor must have no explicit return type.
//A Java constructor cannot be abstract, static, final, and synchronized.

//Constructor Types
//Default Constructor.
//Parameterized Constructor.
//Copy Constructor.
//Static Constructor.
//Private Constructor.

//Can you override a constructor?
//Constructor looks like method but it is not. It does not have a return type and its name is same as the class name.
// But, a constructor cannot be overridden.

//Can constructor be inherited?/
//No, constructors cannot be inherited in Java. In inheritance sub class inherits the members of a super class except constructors.
// In other words, constructors cannot be inherited in Java therefore, there is no need to write final before constructors.

//What is the main advantage of constructor?
//Constructors are used to initialize the objects of the class with initial values. Constructors are invoked automatically when the objects are created. Constructors can have default parameters
/// constructor k print korar jonno method lagbe
////oi method er modde variable guli dokai dite hobe.then it will be print.others wise it will not print